name: Frontend Continous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  Lint-Job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Cache restore
        uses: ylemkimon/cache-restore@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: cd starter/frontend && npm ci

      - name: Run linter
        id: lint
        run: cd starter/frontend && npm run lint --fix

  Test-Job: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Cache restore
        uses: ylemkimon/cache-restore@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Installing dependencies
        run: cd starter/frontend && npm ci

      - name: Tests
        id: tests
        run: cd starter/frontend && npm run test

  Build-and-Deploy-Job:
    runs-on: ubuntu-latest
    needs: [Lint-Job, Test-Job]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
       # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      # AWS ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./frontend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        if: success()   # error handling
      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }} # default is latest stable
        id: kubectl-tool-installer

      - name: Print kubectl version
        run: kubectl version --client

      - name: Update AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
          aws --version
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        
      - name: Print AWS CLI configuration # DEBUGGING 1
        run: aws configure list
      - name: Print kubectl configuration # DEBUGGING 2
        run: kubectl config view
      - name: Print AWS CLI version # DEBUGGING 3
        run: aws --version
      - name: Debugging info # DEBUGGING 4
        run: |
          echo "AWS_REGION: $AWS_REGION"
          echo "EKS_CLUSTER_NAME: $EKS_CLUSTER_NAME"
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          kubectl version
          kubectl cluster-info dump
      - name: Verify cluster configuration  # for Debugging
        run: kubectl cluster-info
      - name: Deploy to EKS
        run: |
          kustomize build ./frontend/k8s | kubectl apply -f -
